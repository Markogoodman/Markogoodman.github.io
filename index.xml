<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Marko</title>
    <link>https://markogoodman.github.io/</link>
    <description>Recent content on Marko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>marko958m@gmail.com (Marko Peng)</managingEditor>
    <webMaster>marko958m@gmail.com (Marko Peng)</webMaster>
    <copyright>©{2020}, All Rights Reserved</copyright>
    <lastBuildDate>Sat, 13 Jun 2020 22:46:49 +0800</lastBuildDate>
    
        <atom:link href="https://markogoodman.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      

      
      <item>
        <title>Csrf</title>
        <link>https://markogoodman.github.io/posts/csrf/</link>
        <pubDate>Sat, 17 Oct 2020 15:05:29 +0800</pubDate>
        <author>marko958m@gmail.com (Marko Peng)</author>
        <atom:modified>Sat, 17 Oct 2020 15:05:29 +0800</atom:modified>
        <guid>https://markogoodman.github.io/posts/csrf/</guid>
        <description>筆記一下研究 csrf 查到的資料，有些小地方網路上的資料都滿模糊的真的查有夠久 XD CSRF (Cross-site request forgery) 基本原理 基本原理就是使用者在某個 A 網站認證(登入帳號之類的)</description>
        
        <dc:creator>Marko Peng</dc:creator>
        
        
        
        
          
            
              <category>csrf</category>
            
          
        
        
          
            
              <category>程式</category>
            
          
        
        
      </item>
      
      <item>
        <title>Scheduling in Go Part III</title>
        <link>https://markogoodman.github.io/posts/scheduling-in-go-part-iii/</link>
        <pubDate>Sat, 19 Sep 2020 21:41:43 +0800</pubDate>
        <author>marko958m@gmail.com (Marko Peng)</author>
        <atom:modified>Sat, 19 Sep 2020 21:41:43 +0800</atom:modified>
        <guid>https://markogoodman.github.io/posts/scheduling-in-go-part-iii/</guid>
        <description>Part III: Examples Goroutine 的運作原理其實在前面兩篇就有很好的解釋拉 這個部分主要是給一些實際的例子，會介紹一下平行與並行適合的是哪些情況，Goroutine 到底</description>
        
        <dc:creator>Marko Peng</dc:creator>
        
        
        
        
          
            
              <category>Go</category>
            
          
            
              <category>Goroutine</category>
            
          
            
              <category>scheduler</category>
            
          
        
        
          
            
              <category>程式</category>
            
          
        
        
          
            
              <category>Scheduling in Go</category>
            
          
        
      </item>
      
      <item>
        <title>Scheduling in Go Part II</title>
        <link>https://markogoodman.github.io/posts/scheduling-in-go-part-ii/</link>
        <pubDate>Sat, 12 Sep 2020 00:54:03 +0800</pubDate>
        <author>marko958m@gmail.com (Marko Peng)</author>
        <atom:modified>Sat, 12 Sep 2020 00:54:03 +0800</atom:modified>
        <guid>https://markogoodman.github.io/posts/scheduling-in-go-part-ii/</guid>
        <description>https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part2.html 以下截圖都是從這個網站來的 Part II: Go Scheduler 這部分要開始介紹 Go 的 Scheduler 是怎麼運作的，以及它的優勢在哪裡 在 Go 裡面執行 runtime.NumCPU() 可以知道目前的電腦有幾個 virtual core (看有幾</description>
        
        <dc:creator>Marko Peng</dc:creator>
        
        
        
        
          
            
              <category>Go</category>
            
          
            
              <category>Goroutine</category>
            
          
            
              <category>scheduler</category>
            
          
        
        
          
            
              <category>程式</category>
            
          
        
        
          
            
              <category>Scheduling in Go</category>
            
          
        
      </item>
      
      <item>
        <title>Go 的 MAP 要不要用指標</title>
        <link>https://markogoodman.github.io/posts/go-map/</link>
        <pubDate>Fri, 17 Jul 2020 23:19:11 +0800</pubDate>
        <author>marko958m@gmail.com (Marko Peng)</author>
        <atom:modified>Fri, 17 Jul 2020 23:19:11 +0800</atom:modified>
        <guid>https://markogoodman.github.io/posts/go-map/</guid>
        <description>一開始用 Go 的 Map 時常常搞不清楚到底要不要傳指標，好像大部分的時候都不用，但用到 unmarshal 之類的 function 就又要傳指標進去了。 這篇就來研究一下 Go 的 Map 到底是什麼生</description>
        
        <dc:creator>Marko Peng</dc:creator>
        
        
        
        
          
            
              <category>Go</category>
            
          
            
              <category>map</category>
            
          
            
              <category>pointer</category>
            
          
        
        
          
            
              <category>程式</category>
            
          
        
        
      </item>
      
      <item>
        <title>Goroutine 為啥那麼快 (Scheduling in Go) Part I</title>
        <link>https://markogoodman.github.io/posts/scheduling-in-go-part-i/</link>
        <pubDate>Sat, 11 Jul 2020 00:16:33 +0800</pubDate>
        <author>marko958m@gmail.com (Marko Peng)</author>
        <atom:modified>Sat, 11 Jul 2020 00:16:33 +0800</atom:modified>
        <guid>https://markogoodman.github.io/posts/scheduling-in-go-part-i/</guid>
        <description>關於這系列文 之前看了 Ardan labs 寫的下面這個系列文還滿不錯的 https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html 主要是在講 Goroutine 和一般我們看到的 thread 比起來到底厲害在哪裡，也舉了一些範例讓讀者知道 Goroutine 用在哪裡</description>
        
        <dc:creator>Marko Peng</dc:creator>
        
        
        
        
          
            
              <category>Go</category>
            
          
            
              <category>Goroutine</category>
            
          
            
              <category>scheduler</category>
            
          
        
        
          
            
              <category>程式</category>
            
          
        
        
          
            
              <category>Scheduling in Go</category>
            
          
        
      </item>
      
      <item>
        <title>Mongodb Partial and Sparse Index</title>
        <link>https://markogoodman.github.io/posts/mongodb-partial-sparse-index/</link>
        <pubDate>Sun, 14 Jun 2020 02:19:55 +0800</pubDate>
        <author>marko958m@gmail.com (Marko Peng)</author>
        <atom:modified>Sun, 14 Jun 2020 02:19:55 +0800</atom:modified>
        <guid>https://markogoodman.github.io/posts/mongodb-partial-sparse-index/</guid>
        <description>前幾天幫原本已經有資料的 collection 新建 unique index 的時候讓 Server 啟動爆掉了記錄一下 1 2 3 db.coll.insert({&amp;#34;a&amp;#34;:1}) db.coll.insert({&amp;#34;a&amp;#34;:2}) db.coll.createIndex({&amp;#34;b&amp;#34;:1}, {unique: true}) // duplicate key error 在一個之前資料都沒有的 field 上建 unique index，結果噴出了下</description>
        
        <dc:creator>Marko Peng</dc:creator>
        
        
        
        
          
            
              <category>mongodb</category>
            
          
            
              <category>index</category>
            
          
            
              <category>database</category>
            
          
        
        
          
            
              <category>程式</category>
            
          
        
        
      </item>
      
      <item>
        <title>My First Post</title>
        <link>https://markogoodman.github.io/posts/my-first-post/</link>
        <pubDate>Sat, 13 Jun 2020 22:46:37 +0800</pubDate>
        <author>marko958m@gmail.com (Marko Peng)</author>
        <atom:modified>Sat, 13 Jun 2020 22:46:37 +0800</atom:modified>
        <guid>https://markogoodman.github.io/posts/my-first-post/</guid>
        <description>汪</description>
        
        <dc:creator>Marko Peng</dc:creator>
        
        
        
        
        
        
      </item>
      

    
  </channel>
</rss>