<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Goroutine on Marko</title>
    <link>https://markogoodman.github.io/tags/goroutine/</link>
    <description>Recent content in Goroutine on Marko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>marko958m@gmail.com (Marko Peng)</managingEditor>
    <webMaster>marko958m@gmail.com (Marko Peng)</webMaster>
    <copyright>©{2020}, All Rights Reserved</copyright>
    <lastBuildDate>Sat, 13 Mar 2021 20:53:52 +0800</lastBuildDate>
    
        <atom:link href="https://markogoodman.github.io/tags/goroutine/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>Concurrency in Go IV 第六章 Goroutines and the Go runtime</title>
        <link>https://markogoodman.github.io/posts/concurrency-in-go-iv/</link>
        <pubDate>Sat, 13 Mar 2021 20:53:52 +0800</pubDate>
        <author>marko958m@gmail.com (Marko Peng)</author>
        <atom:modified>Sat, 13 Mar 2021 20:53:52 +0800</atom:modified>
        <guid>https://markogoodman.github.io/posts/concurrency-in-go-iv/</guid>
        <description>這章節是概略介紹一下 Go 的 scheduler 如何運作的～ 有些事之前有看過 不過 tasks 和 continuation 真的是第一次聽到，滿有趣的概念 Work Stealing Fair scheduling，直接把一堆任務平均</description>
        
        <dc:creator>Marko Peng</dc:creator>
        
        
        
        
          
            
              <category>Go</category>
            
          
            
              <category>Goroutine</category>
            
          
            
              <category>concurrency</category>
            
          
        
        
          
            
              <category>程式</category>
            
          
        
        
          
            
              <category>Concurrency in Go</category>
            
          
        
      </item>
      
      <item>
        <title>Concurrency in Go III  第五章 Concurrency at Scale</title>
        <link>https://markogoodman.github.io/posts/concurrency-in-go-iii/</link>
        <pubDate>Sat, 13 Mar 2021 20:52:13 +0800</pubDate>
        <author>marko958m@gmail.com (Marko Peng)</author>
        <atom:modified>Sat, 13 Mar 2021 20:52:13 +0800</atom:modified>
        <guid>https://markogoodman.github.io/posts/concurrency-in-go-iii/</guid>
        <description>筆記都沒啥整理Ｒ Error Propagation // 好像跟 concurrency 比較無關(? 寫 concurrent code 的時候，debug 會比平常難很多，如果互相傳遞資訊時都附上 error 會比較好 Error需要包含一些東</description>
        
        <dc:creator>Marko Peng</dc:creator>
        
        
        
        
          
            
              <category>Go</category>
            
          
            
              <category>Goroutine</category>
            
          
            
              <category>concurrency</category>
            
          
        
        
          
            
              <category>程式</category>
            
          
        
        
          
            
              <category>Concurrency in Go</category>
            
          
        
      </item>
      
      <item>
        <title>Concurrency in Go - II 第四章</title>
        <link>https://markogoodman.github.io/posts/concurrency-in-go-ii/</link>
        <pubDate>Sun, 28 Feb 2021 22:32:38 +0800</pubDate>
        <author>marko958m@gmail.com (Marko Peng)</author>
        <atom:modified>Sun, 28 Feb 2021 22:32:38 +0800</atom:modified>
        <guid>https://markogoodman.github.io/posts/concurrency-in-go-ii/</guid>
        <description>Concurrency in go. 第四章 Concurrency Patterns in Go 這章節就是講一些常見的 Go concurrency pattern，有哪些方便使用以及如何安全的使用這些 pattern confinement 要做到 concurrent safe 除了之前說的 channel 與 primitives 還有些方法</description>
        
        <dc:creator>Marko Peng</dc:creator>
        
        
        
        
          
            
              <category>Go</category>
            
          
            
              <category>Goroutine</category>
            
          
            
              <category>concurrency</category>
            
          
        
        
          
            
              <category>程式</category>
            
          
        
        
          
            
              <category>Concurrency in Go</category>
            
          
        
      </item>
      
      <item>
        <title>Concurrency in Go - I</title>
        <link>https://markogoodman.github.io/posts/concurrency-in-go-i/</link>
        <pubDate>Sat, 27 Feb 2021 23:21:42 +0800</pubDate>
        <author>marko958m@gmail.com (Marko Peng)</author>
        <atom:modified>Sat, 27 Feb 2021 23:21:42 +0800</atom:modified>
        <guid>https://markogoodman.github.io/posts/concurrency-in-go-i/</guid>
        <description>這三章節內容其實滿少的，讀過之後隨便記一記 ch1 Why Is Concurrency Hard? Race condition 應該要依序執行的不同指定們，沒有依照正確的順序造成結果錯誤 例如下面這段程式就有可能出</description>
        
        <dc:creator>Marko Peng</dc:creator>
        
        
        
        
          
            
              <category>Go</category>
            
          
            
              <category>Goroutine</category>
            
          
            
              <category>concurrency</category>
            
          
        
        
          
            
              <category>程式</category>
            
          
        
        
          
            
              <category>Concurrency in Go</category>
            
          
        
      </item>
      
      <item>
        <title>Scheduling in Go Part III</title>
        <link>https://markogoodman.github.io/posts/scheduling-in-go-part-iii/</link>
        <pubDate>Sat, 19 Sep 2020 21:41:43 +0800</pubDate>
        <author>marko958m@gmail.com (Marko Peng)</author>
        <atom:modified>Sat, 19 Sep 2020 21:41:43 +0800</atom:modified>
        <guid>https://markogoodman.github.io/posts/scheduling-in-go-part-iii/</guid>
        <description>Part III: Examples Goroutine 的運作原理其實在前面兩篇就有很好的解釋拉 這個部分主要是給一些實際的例子，會介紹一下平行與並行適合的是哪些情況，Goroutine 到底</description>
        
        <dc:creator>Marko Peng</dc:creator>
        
        
        
        
          
            
              <category>Go</category>
            
          
            
              <category>Goroutine</category>
            
          
            
              <category>scheduler</category>
            
          
        
        
          
            
              <category>程式</category>
            
          
        
        
          
            
              <category>Scheduling in Go</category>
            
          
        
      </item>
      
      <item>
        <title>Scheduling in Go Part II</title>
        <link>https://markogoodman.github.io/posts/scheduling-in-go-part-ii/</link>
        <pubDate>Sat, 12 Sep 2020 00:54:03 +0800</pubDate>
        <author>marko958m@gmail.com (Marko Peng)</author>
        <atom:modified>Sat, 12 Sep 2020 00:54:03 +0800</atom:modified>
        <guid>https://markogoodman.github.io/posts/scheduling-in-go-part-ii/</guid>
        <description>https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part2.html 以下截圖都是從這個網站來的 Part II: Go Scheduler 這部分要開始介紹 Go 的 Scheduler 是怎麼運作的，以及它的優勢在哪裡 在 Go 裡面執行 runtime.NumCPU() 可以知道目前的電腦有幾個 virtual core (看有幾</description>
        
        <dc:creator>Marko Peng</dc:creator>
        
        
        
        
          
            
              <category>Go</category>
            
          
            
              <category>Goroutine</category>
            
          
            
              <category>scheduler</category>
            
          
        
        
          
            
              <category>程式</category>
            
          
        
        
          
            
              <category>Scheduling in Go</category>
            
          
        
      </item>
      
      <item>
        <title>Goroutine 為啥那麼快 (Scheduling in Go) Part I</title>
        <link>https://markogoodman.github.io/posts/scheduling-in-go-part-i/</link>
        <pubDate>Sat, 11 Jul 2020 00:16:33 +0800</pubDate>
        <author>marko958m@gmail.com (Marko Peng)</author>
        <atom:modified>Sat, 11 Jul 2020 00:16:33 +0800</atom:modified>
        <guid>https://markogoodman.github.io/posts/scheduling-in-go-part-i/</guid>
        <description>關於這系列文 之前看了 Ardan labs 寫的下面這個系列文還滿不錯的 https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html 主要是在講 Goroutine 和一般我們看到的 thread 比起來到底厲害在哪裡，也舉了一些範例讓讀者知道 Goroutine 用在哪裡</description>
        
        <dc:creator>Marko Peng</dc:creator>
        
        
        
        
          
            
              <category>Go</category>
            
          
            
              <category>Goroutine</category>
            
          
            
              <category>scheduler</category>
            
          
        
        
          
            
              <category>程式</category>
            
          
        
        
          
            
              <category>Scheduling in Go</category>
            
          
        
      </item>
      

    
  </channel>
</rss>